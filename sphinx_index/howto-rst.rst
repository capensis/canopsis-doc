Autogenerated documentation
===========================

Source : http://sphinx-doc.org/

Sphinx-apidoc
-------------

Sphinx allows to autodocument code using docstrings. When this docstring
documentation is build, a script (sphinx-apidoc) will check each package
and each module to write those lines in rst files (a kind of hook) :

.. code-block:: rest

   .. automodule:: canopsis.common.init
       :members: # documents members (classes, methods, attributes)
       :undoc-members: # lists names of undocumented members
       :show-inheritance:

which means you don't have to manually write this :

.. code-block:: rest

   .. py:class:: canopsis.common.init

      copy/paste docstring

      .. py:method:: a_good_method

         copy/paste docstring

   ...

Plaintext docstrings
--------------------

Every single docstring will be part of your documentation. Even if attributes
don't have docstrings in python, sphinx allows to document them with the
directive ``#:``. By the way, there are several choices for attributes :

.. code-block:: python

   """
   Module docstring
   """

   class Foo:
       """Docstring for class Foo."""

       #: Doc comment for class attribute Foo.bar.
       #: It can have multiple
       lines.  bar = 1

       flox = 1.5 #: Doc comment for Foo.flox. One line only.

       baz = 2
       """Docstring for class attribute Foo.baz."""

       def __init__(self):
           #: Doc comment for instance attribute qux.
           self.qux = 3

           self.spam = 4 """Docstring for instance attribute spam."""

.. note:: A quote from sphinx documentation : "If you document decorated
   functions or methods, keep in mind that autodoc retrieves its docstrings by
   importing the module and inspecting the ``__doc__`` attribute of the given
   function or method. That means that if a decorator replaces the decorated
   function with another, it must copy the original ``__doc__`` to the new
   function."

Useful rst directives
---------------------

Docstrings can be written in plain text or be formatted in rst format. Many
things can be done in rst.

.. code-block:: rst

   .. tip:: You can hightlight parts

.. tip:: You can highlight parts

Plenty other highlighting boxes are available. However, semantics and colors
are identic in some cases. Only the following should be used :

   * .. note:: note
   * .. important:: important
   * .. warning:: warning
   * .. danger:: danger
   * .. error:: error

An exhaustive list of rst directives can be found at :
http://docutils.sourceforge.net/docs/ref/rst/directives.html.

Useful sphinx directives
------------------------

Sphinx enables to use others tags (``.. toctree::``, glossary support,
etc.). An exhaustive list of the new directives can be found here :
http://sphinx-doc.org/extdev/nodes.html. However, the following seem
interessant to use :

.. code-block:: rst

   .. codeauthor:: jbb jbbraun@capensis.org

.. codeauthor:: jbb jbbraun@capensis.org

.. codeauthor:: jbb jbbraun@capensis.org

codeauthor should only be used in module docstrings. Add your name to the
codeauthor list if you contributed to the module.

.. code-block:: rst

   .. versionadded:: 2.0 Doesn't bug anymore

.. versionadded:: 2.0 Doesn't bug anymore

.. code-block:: rst

   .. data:: some data

.. data:: some data

.. code-block:: rst

   .. seealso:: See ?

.. seealso:: See ?

Documenting methods or functions should be done with the tags bellow. Note
that your plaintext comments and those tags _must_ be separated with a blank
line. Just like the colored boxes, there are equivalences. Only some of them
should be used :

   * ``:param [type] <name>:`` : parameter
   * ``:type <param_name>:`` : parameter type, if you need more than just a word
   * ``:var <name>:`` : variable in the function (alternative for commenting
      attributes) 
   * ``:return:`` : returned value
   * ``:rtype:`` : returned type
   * ``:raises <error>:`` : condition to raise the error

Template
--------

This part recaps everything, providing an exemple :

.. code-block:: python

   def prepare_coffee(cup, volume, sugar=True):
      """
      Records a coffee command and returns a filled cup

      .. data:: Run this routine at least once a day

      :param cup: name of the cup, or its ID
      :type cup: str or int
      :param int volume: volume of coffee in cL
      :param bool sugar: sweet coffee or not
      :var turns: number of times the teaspoon stirred in
      :return: the filled cup ID
      :rtype: int
      :raises TypeError: if the volume is not an int
      :raises ValueError: if the volume exceeds the cup volume

      .. warning:: Cup IDs are not necessary unique
      """

By convention, parameters are given in this order :

   * plaintext docstring (overall explainations)
   * params
   * return
   * raises

Note that the warning is written after parameters because it's about
it. Otherwise, any text should be written before parameters.

.. function:: prepare_coffee(cup, volume, sugar=True)

   Records a coffee command and returns a filled cup

   .. data:: Run this routine at least once a day

   :param cup: name of the cup, or its ID
   :type cup: str or int
   :param int volume: volume of coffee in cL
   :param bool sugar: sweet coffee or not
   :var turns: number of times the teaspoon stirred in
   :return: the filled cup ID
   :rtype: int
   :raises TypeError: if the volume is not an int
   :raises ValueError: if the volume exceeds the cup volume

   .. warning:: Cup IDs are not necessary unique
